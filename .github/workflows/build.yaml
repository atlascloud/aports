---
name: build packages

'on': push

jobs:
  build:
    runs-on: ubuntu-20.04

    strategy:
      matrix:
        release: [edge]  # TODO 3.12, 3.11, etc

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 5
      - uses: actions/cache@v2
        with:
          path: |
            apkcache/
            distfiles/
            .ccache/
          # packages/
          key: ${{ matrix.release }}
      - run: |
          # pwd ; find * ; env
          mkdir -p apkcache/ distfiles/ packages/ .ccache/ .abuild/
          sudo chown -R 1000:1000 .
          make build
        env:
          RELEASE: ${{ matrix.release }}
          PACKAGER: ${{ secrets.PACKAGER }}
          PACKAGER_PRIVKEY: ${{ secrets.PACKAGER_PRIVKEY }}
          SIGNING_KEY: ${{ secrets.SIGNING_KEY }}
          JOBS: ${{ secrets.JOBS }}
          REPODEST: /home/build/packages/${{ matrix.release }}
      # TODO upload to new package server
      # - name: Get Or Create Release
      #   id: create_release
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #     REPODEST: /home/build/packages/${{ matrix.release }}
      #   run: |
      #     release_id=$(curl -sSL \
      #       -H"Accept: application/vnd.github.v3+json" \
      #       -H"authorization: Bearer $GITHUB_TOKEN" \
      #       $GITHUB_API_URL/repos/atlascloud/aports/releases/tags/${{ matrix.release }}-main \
      #         | jq '.id')
      #     if [ "$release_id" == "" ] ; then
      #       release_id=$(curl -sSL \
      #         -XPOST \
      #         -H"Accept: application/vnd.github.v3+json" \
      #         -H"authorization: Bearer $GITHUB_TOKEN" \
      #         -d"{\"tag_name\":\"${{ matrix.release }}-main\",\"name\":\"Release ${{ matrix.release }}-main\",\"body\":\"Alpine Linux packages for ${{ matrix.release }}\"}" \
      #         $GITHUB_API_URL/repos/atlascloud/aports/releases | jq '.id')
      #     fi
      #     echo "::set-env name=RELEASE_ID::$release_id"
      #     # TODO should get from the response of the get/create release call
      #     echo "::set-output name=upload_url::https://uploads.github.com/repos/atlascloud/aports/releases/$release_id/assets"
      # - name: Upload APKs
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #     REPODEST: /home/build/packages/${{ matrix.release }}
      #   run: |
      #     # we have to have the apkindex asset id to be able to upload the
      #     # newest one after we built new packages
      #     apkindex_asset_id=$(curl -sSL \
      #       -H"Accept: application/vnd.github.v3+json" \
      #       $GITHUB_API_URL/repos/atlascloud/aports/releases/$RELEASE_ID/assets \
      #       | jq '.[] | select(.name == "APKINDEX.tar.gz").id')
      #     curl -sSL -XDELETE \
      #       $GITHUB_API_URL/repos/atlascloud/aports/releases/assets/$apkindex_asset_id

      #     cd packages/${{ matrix.release }}/main/x86_64
      #     for apk in *.apk APKINDEX.tar.gz ; do
      #       echo "Uploading $apk to github"
      #       curl -sSL \
      #         -XPOST \
      #         -H"Content-Type: application/octet-stream" \
      #         -H"Accept: application/vnd.github.v3+json" \
      #         -H"authorization: Bearer $GITHUB_TOKEN" \
      #         "${{ steps.create_release.outputs.upload_url }}?name=${apk}" \
      #         --data-binary @${apk} | jq '.'
      #     done
