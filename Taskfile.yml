---
version: 3

dotenv: [".env"]

# vars:
#   FOO: bar

# env
vars:
  CNTRCTL:
    sh: echo nerdctl
    # sh: which docker || which nerdctl

tasks:
  docker:build:
    desc: build docker builder image
    cmds:
      - |
        {{ .CNTRCTL }} pull alpine:edge
        {{ .CNTRCTL }} build --tag ghcr.io/atlascloud/aports-builder:edge .

  docker:push:
    desc: push builder image to github packages
    cmds:
      - |
        {{- .CNTRCTL }} push ghcr.io/atlascloud/aports-builder:edge

  docker:run:
    desc: run the builder image
    cmds:
      - mkdir -p apkcache/ distfiles/ packages/ .ccache/ .abuild/
      - |
        {{- .CNTRCTL }} run -it --rm
        --env-file .env
        -v ${PWD}:/home/build
        -v ${PWD}/apkcache:/etc/apk/cache
        -v ${PWD}/distfiles:/var/cache/distfiles
        --name aports-builder ghcr.io/atlascloud/aports-builder:edge

  docker:runshell:
    desc: run a shell in the builder image (useful for debugging)
    cmds:
      - mkdir -p apkcache/ distfiles/ packages/ .ccache/ .abuild/
      - |
        {{- .CNTRCTL }} run -it --rm
        --env-file .env
        -v ${PWD}:/home/build
        -v ${PWD}/apkcache:/etc/apk/cache
        -v ${PWD}/distfiles:/var/cache/distfiles
        --entrypoint /bin/sh
        --network host
        --name aports-builder ghcr.io/atlascloud/aports-builder:edge

  docker:checksum:
    desc: generate checksums for a package, must specify 'PKG'
    cmds:
      - |
        {{- .CNTRCTL }} run --rm
        -v ${PWD}:/aports
        -v ${PWD}/apkcache:/etc/apk/cache
        -v ${PWD}/distfiles:/var/cache/distfiles
        --workdir /aports/{{ .PKG }}
        alpine:edge sh -c "apk add abuild ; abuild -F checksum"

  docker:super-linter:
    desc: run super linter - should switch to megalinter
    cmds:
      - |
        {{- .CNTRCTL }} run
        -e RUN_LOCAL=true
        -e ACTIONS_RUNNER_DEBUG=false
        -e FILTER_REGEX_EXCLUDE='/tmp/lint/(.abuild|.cacche|.git|apkcache|distfiles|src|tmp)'
        -v ${PWD}:/tmp/lint
        github/super-linter

  docker:test:
    desc: run tests in docker
    cmds:
      - |
        {{- .CNTRCTL }} run
        --workdir /src
        -v ${PWD}:/src
        alpine:edge
        /bin/sh -c "wget -O /tmp/int.sh https://taskfile.dev/install.sh ; sh /tmp/int.sh -d -b /bin ; /bin/task test"

  test:
    desc: run tests
    vars:
      ABS:
        sh: find . -name APKBUILD
    cmds:
      - apk add abuild atools
      - cmd: |
          {{range $i, $APKBUILD := .ABS | splitLines -}}
            cd {{$APKBUILD | dir}}
            abuild -F sanitycheck
            apkbuild-lint APKBUILD
            cd /src
          {{end}}
        ignore_error: true

  upload-package:
    desc: upload a package to packages server
    # vars:
    #   PKG: should be set on command line
    cmds:
      - |
        {{ $SL := splitList "/" .PKG -}}
        {{ $vers := slice $SL 1 2 | first -}}
        {{ $repo := slice $SL 2 3 | first -}}
        {{ $arch := slice $SL 3 4 | first -}}
        curl -v \
          -H "Authorization: Bearer $PKGS_TOKEN" \
          -F "package=@{{ .PKG }}" \
          https://packages.atlascloud.xyz/api/atlascloud/alpine/{{ $vers }}/{{ $repo }}/{{ $arch }}/pkgs

  # we used to do this automatically on the package server, but it can take a very long time and it was doing it
  # on every package upload
  sign-package-index:
    desc: instruct the packages server to generate and sign the index with the packages that we've uploaded so far
    # vars:
    #   PKG: should be set on command line - we aren't doing anything with the pkg, just extracting info from the path
    cmds:
      - |
        {{ $SL := splitList "/" .PKG -}}
        {{ $vers := slice $SL 1 2 | first -}}
        {{ $repo := slice $SL 2 3 | first -}}
        {{ $arch := slice $SL 3 4 | first -}}
        {{ $arch := slice $SL 3 4 | first -}}
        curl \
          -X POST \
          -H "Authorization: Bearer $PKGS_TOKEN" \
          https://packages.atlascloud.xyz/api/atlascloud/alpine/{{ $vers }}/{{ $repo }}/{{ $arch }}/index

  check-pkg-version:
    desc: run checker scripts
    cmds:
      - |
        pkg={{ .PKG | dir | base }}
        echo "checking $pkg"
        [ -f "./checkers/$pkg" ] || exit 0 # if we don't have a checker, skip

        latest_version=$(./checkers/$pkg)
        echo "latest version: $latest_version"
        sed -i "s:pkgver=.*:pkgver=$latest_version:" main/$pkg/APKBUILD
        sed -i "s:pkgrel=.*:pkgrel=0:" main/$pkg/APKBUILD

  check-pkg-versions:
    desc: run checker scripts for every APKBUILD
    vars:
      ABS:
        sh: find . -name APKBUILD
    cmds:
      - for: { var: ABS }
        task: check-pkg-version
        vars:
          PKG: "{{ .ITEM }}"
