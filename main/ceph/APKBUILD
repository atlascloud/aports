# Contributor: John Coyle <dx9err@gmail.com>
# Contributor: Iggy Jackson <iggy@kws1.com>
# Contributor: Duncan Bellamy <dunk@denkimushi.com>
# Maintainer: Duncan Bellamy <dunk@denkimushi.com>
_pkgname=ceph
pkgver=18.2.2
pkgrel=0
_majorver=${pkgver%%.*}
pkgname=$_pkgname$_majorver
pkgdesc="Ceph is a distributed object store and file system, version $_majorver"
pkgusers="ceph"
pkggroups="ceph"
url="https://ceph.io/en/"
arch="all"
# https://github.com/ceph/ceph/blob/master/COPYING
license="LGPL-2.1-only AND LGPL-2.0-or-later AND GPL-2.0-only AND GPL-3.0-only AND CC-BY-SA-1.0 AND BSL-1.0 AND GPL-2.0-or-later WITH Autoconf-exception-2.0 AND BSD-3-Clause AND MIT AND custom"
depends="$pkgname-mds $pkgname-mgr $pkgname-mon $pkgname-osd"
builddir="$srcdir/ceph-$pkgver"
_lua=5.4
_base_deps="
	cryptsetup
	e2fsprogs
	logrotate
	parted
	psmisc
	xfsprogs
	"
_osd_daemon_deps="fuse snappy lz4-libs"
_osd_tools_deps="lz4-libs"
_ceph_volume_deps="lvm2"
_ceph_test_deps="
	gtest-dev
	py3-coverage
	py3-flake8
	py3-nodeenv
	py3-pytest
	py3-tox
	py3-yaml
	xmlstarlet
	"
case "$CARCH" in
	s390x) _arrow_deps="" ;;
	*)     _arrow_deps="apache-arrow-dev c-ares-dev re2-dev" ;;
esac
makedepends="
	acl-dev
	argp-standalone
	bc
	boost-dev
	btrfs-progs
	bzip2-dev
	cmake
	coreutils
	cryptsetup-dev
	cunit-dev
	curl-dev
	cython
	diffutils
	doxygen
	eudev-dev
	expat-dev
	fcgi-dev
	flex
	fmt-dev
	fuse-dev
	git
	graphviz-dev
	gperf
	jq
	keyutils-dev
	libaio-dev
	libatomic_ops-dev
	libcap-ng-dev
	libedit-dev
	librdkafka-dev
	libnl3-dev
	libtirpc-dev
	libtool
	liburing-dev
	libxml2-dev
	linux-headers
	lua$_lua-dev
	lvm2-dev
	lz4-dev
	nasm
	nodejs-current
	npm
	nss-dev
	oath-toolkit-dev
	openldap-dev
	openssl-dev>3
	procps
	python3-dev
	py3-setuptools
	py3-sphinx
	rabbitmq-c-dev
	readline-dev
	rocksdb-dev
	rpcgen
	samurai
	snappy-dev
	sqlite-dev
	userspace-rcu-dev
	util-linux-dev
	xfsprogs-dev
	xmlstarlet
	zstd-dev
	$_base_deps
	$_osd_daemon_deps
	$_osd_tools_deps
	$_ceph_volume_deps
	$_ceph_test_deps
	$_arrow_deps
	"

source="https://download.ceph.com/tarballs/ceph-$pkgver.tar.gz
	ceph.confd
	ceph.initd
	10-musl-fixes.patch
	11-dump_time_header_impl.patch
	11-parse_rfc1123_alt.patch
	11-s3_expiration_header.patch
	13-liburing.patch
	20-pci.patch
	21-cypress.patch
	30-32bit_fix.patch.noauto
	30-ubuntu-32bit-fixes.patch.noauto
	35-fix_ErasureCodeShec.patch
	38-aio.patch
	39-req_bytes.patch
	40-nasm.patch
	45-python.patch
	46-statx.patch
	$pkgname-gcc12.patch::https://github.com/ceph/ceph/commit/963d756ded40f5adf2efef53893c917bec1845c1.patch
	$pkgname-gcc12-memory.patch::https://github.com/ceph/ceph/commit/7c381ba985bd1398ef7d145cc00fae9d0db510e3.patch
	46-fmt9-1.patch
	46-fmt9-2.patch
	46-arrow9.patch
	boost.patch
	"
# to prevent things from installing ceph17 libs, since they have the same SOMAJOR
sonameprefix="ceph$_majorver:so:"
options="!check" # todo

subpackages="
	$pkgname-doc
	$pkgname-base
	$pkgname-common
	$pkgname-mds
	$pkgname-mgr-dashboard:mgr_dashboard:noarch
	$pkgname-mgr-diskprediction-local:mgr_diskpredicton_local:noarch
	$pkgname-mgr-modules-core:mgr_modules_core:noarch
	$pkgname-mgr-rook:mgr_rook:noarch
	$pkgname-mgr-k8events:mgr_k8events:noarch
	$pkgname-mgr
	$pkgname-mon::noarch
	$pkgname-mon-daemon:mon_daemon
	$pkgname-mon-tools:mon_tools
	$pkgname-fuse:ceph_fuse
	$pkgname-openrc
	$pkgname-osd::noarch
	$pkgname-osd-daemon:osd_daemon
	$pkgname-osd-tools:osd_tools
	$pkgname-volume:ceph_volume:noarch
	$pkgname-radosgw
	$pkgname-bash-completion:bash_completion:noarch
	$pkgname-dev
	$pkgname-user::noarch
	$pkgname-utils
	cephfs$_majorver-mirror:mirror
	cephfs$_majorver-top:top:noarch
	rbd-fuse$_majorver:rbd_fuse
	rbd-mirror$_majorver:rbd_mirror
	rbd-nbd$_majorver:rbd_nbd
	librbd$_majorver:librbd
	libcephfs$_majorver:libcephfs
	libcephsqlite$_majorver:libcephsqlite
	librados$_majorver:librados
	py3-rados$_majorver:_py3_rados
	libradosstriper$_majorver:libradosstriper
	py3-rbd$_majorver:_py3_rbd
	py3-cephfs$_majorver:_py3_cephfs
	"

_ceph_uid=167
_ceph_gid=167

_py3_sitelib() {
	python3 -c "import site; print(site.getsitepackages()[0])"
}

prepare() {
	default_prepare

	case "$CARCH" in
		x86|armv7|armhf)
			patch -p1 -i "$srcdir"/30-32bit_fix.patch.noauto
			patch -p1 -i "$srcdir"/30-ubuntu-32bit-fixes.patch.noauto ;;
	esac

	# delete bundled boost as >300mb and using system boost
	rm -rf src/boost
}

build() {
	export CEPH_BUILD_VIRTUALENV="$builddir"
	export NPM_REGISTRY="https://npm.open-registry.dev"
	export CXXFLAGS="$CXXFLAGS -DSTATX_INO=0x100U"

	case "$CARCH" in
		s390x) _par="OFF" ;;
		*)     _par="ON"  ;;
	esac

	cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_LIBDIR=/usr/lib \
		-DCMAKE_INSTALL_LOCALSTATEDIR=/var \
		-DCMAKE_INSTALL_SYSCONFDIR=/etc \
		-DALLOCATOR=libc \
		-DLUA_LIBRARIES=/usr/lib/lua"$_lua"/liblua.so \
		-DWITH_BABELTRACE=OFF \
		-DWITH_LTTNG=OFF \
		-DWITH_MANPAGE=ON \
		-DWITH_PYTHON3=3 \
		-DWITH_RADOSGW_AMQP_ENDPOINT=OFF \
		-DWITH_RADOSGW_SELECT_PARQUET="$_par" \
		-DWITH_RDMA=OFF \
		-DWITH_REENTRANT_STRSIGNAL=ON \
		-DWITH_SPDK=OFF \
		-DWITH_SYSTEMD=OFF \
		-DWITH_SYSTEM_ARROW=ON \
		-DWITH_SYSTEM_BOOST=ON \
		-DWITH_SYSTEM_LIBURING=ON \
		-DWITH_SYSTEM_NPM=ON \
		-DWITH_SYSTEM_ROCKSDB=ON \
		-DWITH_SYSTEM_ZSTD=ON \
		-DWITH_TESTS="$(want_check && echo ON || echo OFF)" \
		-DWITH_THREAD_SAFE_RES_QUERY=ON

	export NODE_OPTIONS=--openssl-legacy-provider
	cmake --build build --target cmake_object_order_depends_target_common-options-objs
	cmake --build build

}

package() {
	# free up some space before install
	rm -rf build/src/pybind/mgr/dashboard/cypress
	rm -rf src/pybind/mgr/dashboard/frontend/node_modules

	DESTDIR="$pkgdir" cmake --install build

	# remove the upstream init file and put in openrc ones
	rm -f "$pkgdir"/etc/init.d/ceph
	install -D -m 755 "$srcdir"/"$_pkgname".initd "$pkgdir"/etc/init.d/ceph
	install -D -m 644 "$srcdir"/"$_pkgname".confd "$pkgdir"/etc/conf.d/ceph

	# move mount.* binaries to /sbin
	mkdir -p "$pkgdir"/sbin
	mv "$pkgdir"/usr/sbin/mount.* "$pkgdir"/sbin

	install -m 644 -D src/etc-rbdmap "$pkgdir"/etc/ceph/rbdmap
	install -m 644 -D src/logrotate.conf "$pkgdir"/etc/logrotate.d/ceph
	install -m 644 -D etc/sysctl/90-ceph-osd.conf "$pkgdir"/etc/sysctl.d/90-ceph-osd.conf

	# udev rules
	install -m 644 -D udev/50-rbd.rules "$pkgdir"/etc/udev/rules.d/50-rbd.rules
	# sudoers.d
	install -m 600 -D sudoers.d/ceph-smartctl "$pkgdir"/etc/sudoers.d/ceph-smartctl

	# delete systemd related stuff
	rm -f "$pkgdir"/usr/sbin/ceph-volume-systemd

	# move docs to docs
	mkdir -p "$pkgdir"/usr/share/doc/ceph/dashboard
	mv "$pkgdir"/usr/share/ceph/mgr/dashboard/*.rst "$pkgdir"/usr/share/doc/ceph/dashboard/
	mv "$pkgdir"/usr/share/ceph/mgr/cephadm/HACKING.rst "$pkgdir"/usr/share/doc/ceph/cephadm-HACKING.rst
}

check() {
	cd "$builddir"/build
	CTEST_OUTPUT_ON_FAILURE=TRUE ctest
}

# This subpackage is a little weird and a side effect of trying to keep
# the daemon packages as small as possible. We might be able to roll this into
# the base/common package later if we can slim those down or break them up in a
# different way
user() {
	pkgdesc="Minimal package to create a user for other ceph packages."
	depends=""
	install="$pkgname-user.pre-install"
	mkdir -p "$subpkgdir"
}

base() {
	pkgdesc="Base is the package that includes all the files shared amongst ceph servers"
	depends="$_base_deps
		$pkgname-user=$pkgver-r$pkgrel
		$pkgname-common=$pkgver-r$pkgrel
		librbd$_majorver=$pkgver-r$pkgrel
		librados$_majorver=$pkgver-r$pkgrel
		libcephfs$_majorver=$pkgver-r$pkgrel
		"

	amove usr/bin/ceph-crash \
		usr/bin/crushtool \
		usr/bin/*maptool \
		usr/bin/ceph-kvstore-tool \
		usr/bin/ceph-run \
		usr/sbin/ceph-create-keys \
		usr/libexec/ceph/ceph_common.sh \
		usr/lib/rados-classes/*.so* \
		usr/lib/ceph/erasure-code/libec_*.so* \
		usr/lib/ceph/compressor/libceph_*.so* \
		usr/lib/ceph/crypto/libceph_*.so* \
		etc/logrotate.d/ceph
	for dir in crash crash/posted tmp bootstrap-osd bootstrap-mds \
			bootstrap-rgw bootstrap-mgr bootstrap-rbd \
			bootstrap-rbd-mirror; do

		install -m 750 -o $_ceph_uid -g $_ceph_gid -d \
			"$subpkgdir"/var/lib/ceph/$dir
	done
}

common() {
	pkgdesc="Common utilities to mount and interact with a ceph storage cluster."
	depends="py3-rados$_majorver py3-rbd$_majorver py3-cephfs$_majorver py3-prettytable"

	amove usr/bin/ceph \
		usr/bin/ceph-authtool \
		usr/bin/ceph-conf \
		usr/bin/ceph-rbdnamer \
		usr/bin/rados \
		usr/bin/rbd \
		usr/bin/rbdmap \
		sbin/mount.ceph \
		usr/share/ceph/*.ceph.com* \
		etc/ceph/rbdmap

	amove "$(_py3_sitelib)"/ceph_argparse.py* "$(_py3_sitelib)"/ceph_daemon.py*

	amove etc/udev/rules.d/50-rbd.rules
	install -m 3770 -o $_ceph_uid -g $_ceph_gid -d \
		"$subpkgdir"/var/log/ceph
	install -m 750 -o $_ceph_uid -g $_ceph_gid -d \
		"$subpkgdir"/var/lib/ceph
}

mds() {
	pkgdesc="Metadata server daemon for the Ceph distributed file system."
	depends="$pkgname-base"

	amove usr/bin/ceph-mds
	install -m 750 -o $_ceph_uid -g $_ceph_gid -d \
		"$subpkgdir"/var/lib/ceph/mds
}

mon() {
	pkgdesc="Cluster monitor daemon virtual package for the Ceph distributed file system."
	depends="$pkgname-base
		$pkgname-mon-daemon=$pkgver-r$pkgrel
		$pkgname-mon-tools=$pkgver-r$pkgrel"

	mkdir -p "$subpkgdir"
}

mon_daemon() {
	pkgdesc="Cluster monitor daemon for the Ceph distributed file system."
	depends="$pkgname-user=$pkgver-r$pkgrel"

	amove usr/bin/ceph-mon
	install -m 750 -o $_ceph_uid -g $_ceph_gid -d \
		"$subpkgdir"/var/lib/ceph/mon
}

mon_tools() {
	pkgdesc="Cluster monitor tools for the Ceph distributed file system."
	depends=

	amove usr/bin/ceph-monstore-tool
	install -m 750 -o $_ceph_uid -g $_ceph_gid -d \
		"$subpkgdir"/var/lib/ceph/mon
}

ceph_fuse() {
	pkgdesc="FUSE based client for Ceph distributed network file system."
	depends=

	amove usr/bin/ceph-fuse sbin/mount.fuse.ceph
}

rbd_fuse() {
	pkgdesc="FUSE based client to map Ceph rbd images to files."
	depends=

	amove usr/bin/rbd-fuse
}

rbd_mirror() {
	pkgdesc="Daemon for mirroring RBD images between Ceph clusters."
	depends="$pkgname-common=$pkgver-r$pkgrel"

	amove usr/bin/rbd-mirror
}

rbd_nbd() {
	pkgdesc="NBD based client to map Ceph rbd images to local device."
	depends=

	amove usr/bin/rbd-nbd
}

radosgw() {
	pkgdesc="Rados REST gateway which implements Amazon's S3 and OpenStack's Swift APIs."
	depends="$pkgname-common oath-toolkit-liboath"

	amove usr/bin/radosgw*
	mkdir -p "$subpkgdir"/var/lib/ceph/radosgw
}

osd() {
	pkgdesc="Object storage daemon virtual package for the Ceph distributed file system."
	depends="$pkgname-osd-daemon=$pkgver-r$pkgrel
		$pkgname-osd-tools=$pkgver-r$pkgrel
		$pkgname-volume=$pkgver-r$pkgrel"

	mkdir -p "$subpkgdir"
}

osd_daemon() {
	pkgdesc="Object storage daemon for the Ceph distributed file system."
	depends="$_osd_daemon_deps $pkgname-user=$pkgver-r$pkgrel"

	amove usr/bin/ceph-osd \
		usr/libexec/ceph/ceph-osd-prestart.sh \
		etc/sudoers.d/ceph-smartctl \
		etc/sysctl.d/90-ceph-osd.conf
	install -m 750 -o $_ceph_uid -g $_ceph_gid -d \
		"$subpkgdir"/var/lib/ceph/osd
}

osd_tools() {
	pkgdesc="Object storage daemon tools for the Ceph distributed file system."
	depends="$pkgname-base=$pkgver-r$pkgrel $_osd_tools_deps"

	amove usr/bin/ceph-clsinfo usr/bin/ceph-*-tool
	install -m 750 -o $_ceph_uid -g $_ceph_gid -d \
		"$subpkgdir"/var/lib/ceph/osd
}

ceph_volume() {
	pkgdesc="ceph-volume tool for the Ceph distributed file system."
	depends="$_ceph_volume_deps"

	amove usr/sbin/ceph-volume \
		"$(_py3_sitelib)"/ceph_volume "$(_py3_sitelib)"/ceph_volume-*
}

librados() {
	pkgdesc="RADOS distributed object store client library"
	depends=

	amove usr/lib/librados.so.* usr/lib/ceph/libceph-common.so.*
}

_py3_rados() {
	pkgdesc="Python libraries for the RADOS object store"
	depends=

	amove "$(_py3_sitelib)"/rados*
}

libradosstriper() {
	pkgdesc="RADOS striping library"
	depends=

	amove usr/lib/libradosstriper.so.*
}

librbd() {
	pkgdesc="RADOS block device client library"
	depends=

	amove usr/lib/librbd.so.*
}

_py3_rbd() {
	pkgdesc="Python libraries for the RADOS block device"
	depends="py3-rados$_majorver"

	amove "$(_py3_sitelib)"/rbd*
}

libcephsqlite() {
	pkgdesc="SQLite Virtual File System (VFS) on top of RADOS"
	depends=

	amove usr/lib/libcephsqlite.so*
}

libcephfs() {
	pkgdesc="Ceph distributed file system client library"
	depends=

	amove usr/lib/libcephfs.so.*
}

mirror() {
	pkgdesc="daemon for mirroring CephFS directory snapshots between Ceph clusters"
	depends=

	amove /usr/bin/cephfs-mirror
}

top() {
	pkgdesc="top like utility to display various filesystem metrics in realtime"
	depends="python3 py3-rados17"

	amove "$(_py3_sitelib)"/cephfs_top*
	amove /usr/bin/cephfs-top
}

_py3_cephfs() {
	pkgdesc="Python libraries for Ceph distributed file system"
	depends="py3-rados$_majorver"

	amove "$(_py3_sitelib)"/cephfs*
}

utils() {
	pkgdesc="Ceph utils and recovery tools"
	depends="$pkgname-common=$pkgver-r$pkgrel"

	amove usr/bin/ceph-diff-sorted \
		usr/bin/ceph-post-file \
		usr/bin/ceph-syn \
		usr/bin/cephfs-data-scan \
		usr/bin/ceph-dencoder \
		usr/lib/ceph/denc \
		usr/bin/cephfs-journal-tool \
		usr/bin/cephfs-table-tool \
		usr/bin/rbd-replay* \
		usr/bin/crushdiff
}

bash_completion() {
	pkgdesc="Bash completions for Ceph"
	depends=

	install_if="ceph=$pkgver-r$pkgrel bash-completion"
	amove etc/bash_completion.d/*
}

mgr_dashboard() {
	pkgdesc="Dashboard module for ceph-mgr"
	depends="$pkgname-ceph-common-r$pkgrel
		$pkgname-mgr-r$pkgrel
		py3-bcrypt
		py3-cherrypy
		py3-jwt
		py3-more-itertools
		py3-openssl
		py3-prettytable
		py3-requests
		py3-routes
		py3-yaml
		"

	amove usr/share/ceph/mgr/dashboard
}

mgr_diskpredicton_local() {
	pkgdesc="diskprediction-local module for ceph-mgr"
	depends="$pkgname-mgr-r$pkgrel
		py3-numpy
		py3-scikit-learn
		py3-scipy
		"

	amove usr/share/ceph/mgr/diskprediction_local
}

mgr_modules_core() {
	pkgdesc="ceph manager modules which are always enabled"
	depends="py3-cherrypy
		py3-dateutil
		py3-natsort
		py3-pecan
		py3-requests
		py3-werkzeug
		"

	local _mod="alerts balancer crash devicehealth influx insights iostat localpool mirroring nfs orchestrator \
			osd_perf_query osd_support pg_autoscaler progress prometheus rbd_support restful selftest snap_schedule \
			stats status telegraf telemetry test_orchestrator volumes zabbix"
	for _m in ${_mod}; do
		amove usr/share/ceph/mgr/"$_m"
	done
}

mgr_rook() {
	pkgdesc="rook module for ceph-mgr"
	depends="$pkgname-mgr-r$pkgrel
		py3-jsonpatch
		py3-kubernetes"

	amove usr/share/ceph/mgr/rook
}

mgr_k8events() {
	pkgdesc="kubernetes events module for ceph-mgr"
	depends="$pkgname-mgr-r$pkgrel
		py3-kubernetes
		py3-yaml"

	amove usr/share/ceph/mgr/k8sevents
}

mgr() {
	pkgdesc="Ceph Manager Daemon"
	depends="$pkgname-base=$pkgver-r$pkgrel
		$pkgname-mgr-modules-core=$pkgver-r$pkgrel"

	amove usr/bin/ceph-mgr usr/share/ceph/mgr

	install -m 750 -o $_ceph_uid -g $_ceph_gid -d \
		"$subpkgdir"/var/lib/ceph/mgr
}

